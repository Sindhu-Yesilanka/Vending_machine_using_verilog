// Code your design here
module vending_machine (
    input clk,
    input reset,
    input [1:0] coin, // 00 = no coin, 01 = 5 units, 10 = 10 units
    output reg dispense
);

    reg [1:0] state, next_state;

    // States
    localparam S0  = 2'b00,  // 0 units
               S5  = 2'b01,  // 5 units
               S10 = 2'b10,  // 10 units
               S15 = 2'b11;  // 15 or more (dispense)

    // State transition
    always @(posedge clk or posedge reset) begin
        if (reset)
            state <= S0;
        else
            state <= next_state;
    end

    // Next-state logic + output
    always @(*) begin
        dispense = 0;
        case (state)
            S0: begin
                if (coin == 2'b01) next_state = S5;
                else if (coin == 2'b10) next_state = S10;
                else next_state = S0;
            end
            S5: begin
                if (coin == 2'b01) next_state = S10;
                else if (coin == 2'b10) next_state = S15;
                else next_state = S5;
            end
            S10: begin
                if (coin == 2'b01) next_state = S15;
                else if (coin == 2'b10) next_state = S15;
                else next_state = S10;
            end
            S15: begin
                dispense = 1;       // Product dispensed
                next_state = S0;    // Reset to start
            end
            default: next_state = S0;
        endcase
    end

endmodule
Test bench
// Code your testbench here
// or browse Examples
module tb_vending_machine();

    reg clk, reset;
    reg [1:0] coin;
    wire dispense;

    vending_machine uut (
        .clk(clk),
        .reset(reset),
        .coin(coin),
        .dispense(dispense)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #5 clk = ~clk;  // 10ns period
    end

    // Stimulus
    initial begin
        reset = 1; coin = 2'b00;
        #10 reset = 0;

        // Insert 5 + 10 = 15 (dispense)
        #10 coin = 2'b01; // 5
        #10 coin = 2'b10; // 10
        #10 coin = 2'b00;

        // Insert 10 + 5 = 15 (dispense)
        #10 coin = 2'b10; // 10
        #10 coin = 2'b01; // 5
        #10 coin = 2'b00;

        // Insert 10 + 10 = 20 (dispense at 15)
        #10 coin = 2'b10; // 10
        #10 coin = 2'b10; // 10
        #10 coin = 2'b00;

        #50 $finish;
    end

    // Monitor output
    initial begin
        $monitor("Time=%0t | Coin=%b | Dispense=%b", $time, coin, dispense);
    end

endmodule
